# -*- coding: utf-8 -*-
"""
Created on Sun Feb 23 12:59:22 2020

@author: Enda
"""

from matplotlib import pyplot as plt
import numpy as np
from itertools import cycle
cycol = cycle('bgrcmk')

#########################################################################

errs1b=np.array([[1.00000000e+02, 1.00000000e+02, 7.57264941e-04],
       [1.26000000e+02, 1.26000000e+02, 4.03035092e-06],
       [1.58000000e+02, 1.58000000e+02, 1.43149651e-04],
       [2.00000000e+02, 2.00000000e+02, 1.58727521e-04],
       [2.51000000e+02, 2.51000000e+02, 5.18345281e-04],
       [3.16000000e+02, 3.16000000e+02, 1.82111664e-04],
       [3.98000000e+02, 3.98000000e+02, 2.86662247e-04],
       [5.01000000e+02, 5.01000000e+02, 1.91402700e-04],
       [6.31000000e+02, 6.31000000e+02, 1.47810877e-04],
       [7.94000000e+02, 7.94000000e+02, 1.30242766e-04],
       [1.00000000e+03, 1.00000000e+03, 1.35370825e-05]])

errs2b=np.array([[1.00000000e+02, 1.00000000e+02, 4.74941297e-05],
       [1.26000000e+02, 1.26000000e+02, 6.33090606e-04],
       [1.58000000e+02, 1.58000000e+02, 4.06218959e-04],
       [2.00000000e+02, 2.00000000e+02, 2.54143911e-04],
       [2.51000000e+02, 2.51000000e+02, 2.49150331e-04],
       [3.16000000e+02, 3.16000000e+02, 3.54298637e-05],
       [3.98000000e+02, 3.98000000e+02, 4.50551443e-04],
       [5.01000000e+02, 5.01000000e+02, 3.05435817e-04],
       [6.31000000e+02, 6.31000000e+02, 7.41917756e-05],
       [7.94000000e+02, 7.94000000e+02, 1.44335290e-05],
       [1.00000000e+03, 1.00000000e+03, 1.75549039e-04]])

errs3b=np.array([[1.00000000e+02, 1.00000000e+02, 3.22626489e-04],
       [1.26000000e+02, 1.26000000e+02, 2.09975644e-04],
       [1.58000000e+02, 1.58000000e+02, 1.75334387e-04],
       [2.00000000e+02, 2.00000000e+02, 2.17278736e-04],
       [2.51000000e+02, 2.51000000e+02, 1.36066181e-04],
       [3.16000000e+02, 3.16000000e+02, 2.67180095e-05],
       [3.98000000e+02, 3.98000000e+02, 1.41998532e-04],
       [5.01000000e+02, 5.01000000e+02, 2.52210323e-04],
       [6.31000000e+02, 6.31000000e+02, 4.88229401e-05],
       [7.94000000e+02, 7.94000000e+02, 2.72129306e-04],
       [1.00000000e+03, 1.00000000e+03, 3.87579160e-05]])

errs4b=np.array([[1.00000000e+02, 1.00000000e+02, 4.95359848e-04],
       [1.26000000e+02, 1.26000000e+02, 7.29666328e-04],
       [1.58000000e+02, 1.58000000e+02, 3.98700432e-04],
       [2.00000000e+02, 2.00000000e+02, 6.81187842e-05],
       [2.51000000e+02, 2.51000000e+02, 2.86194569e-04],
       [3.16000000e+02, 3.16000000e+02, 2.51028487e-04],
       [3.98000000e+02, 3.98000000e+02, 1.70837244e-04],
       [5.01000000e+02, 5.01000000e+02, 5.08326674e-04],
       [6.31000000e+02, 6.31000000e+02, 8.52448420e-05],
       [7.94000000e+02, 7.94000000e+02, 1.63281075e-04],
       [1.00000000e+03, 1.00000000e+03, 8.37625018e-05]])

errs5b=np.array([[1.00000000e+02, 1.00000000e+02, 7.41603491e-04],
       [1.26000000e+02, 1.26000000e+02, 5.12285702e-04],
       [1.58000000e+02, 1.58000000e+02, 2.40811660e-04],
       [2.00000000e+02, 2.00000000e+02, 3.27429522e-04],
       [2.51000000e+02, 2.51000000e+02, 4.09925258e-04],
       [3.16000000e+02, 3.16000000e+02, 3.66434786e-04],
       [3.98000000e+02, 3.98000000e+02, 2.21423937e-04],
       [5.01000000e+02, 5.01000000e+02, 1.57567992e-04],
       [6.31000000e+02, 6.31000000e+02, 3.61267374e-04],
       [7.94000000e+02, 7.94000000e+02, 1.61853118e-04],
       [1.00000000e+03, 1.00000000e+03, 1.25319119e-04]])

errs6b=np.array([[1.00000000e+02, 1.00000000e+02, 8.84856783e-04],
       [1.26000000e+02, 1.26000000e+02, 4.10357151e-04],
       [1.58000000e+02, 1.58000000e+02, 3.20683730e-04],
       [2.00000000e+02, 2.00000000e+02, 5.29949005e-04],
       [2.51000000e+02, 2.51000000e+02, 2.26763808e-04],
       [3.16000000e+02, 3.16000000e+02, 2.97198707e-05],
       [3.98000000e+02, 3.98000000e+02, 7.46324859e-05],
       [5.01000000e+02, 5.01000000e+02, 2.15548248e-04],
       [6.31000000e+02, 6.31000000e+02, 1.45864285e-04],
       [7.94000000e+02, 7.94000000e+02, 6.46014178e-05],
       [1.00000000e+03, 1.00000000e+03, 5.97686947e-05]])

errs7b=np.array([[1.00000000e+02, 1.00000000e+02, 3.17199225e-04],
       [1.26000000e+02, 1.26000000e+02, 6.33044195e-05],
       [1.58000000e+02, 1.58000000e+02, 3.07164400e-04],
       [2.00000000e+02, 2.00000000e+02, 5.82586321e-04],
       [2.51000000e+02, 2.51000000e+02, 2.80755905e-04],
       [3.16000000e+02, 3.16000000e+02, 1.91493549e-04],
       [3.98000000e+02, 3.98000000e+02, 4.40439197e-04],
       [5.01000000e+02, 5.01000000e+02, 3.87530445e-05],
       [6.31000000e+02, 6.31000000e+02, 8.67654770e-05],
       [7.94000000e+02, 7.94000000e+02, 1.49625840e-04],
       [1.00000000e+03, 1.00000000e+03, 2.01192022e-04]])

errs8b=np.array([[1.00000000e+02, 1.00000000e+02, 4.43375909e-04],
       [1.26000000e+02, 1.26000000e+02, 7.87155083e-04],
       [1.58000000e+02, 1.58000000e+02, 4.12091390e-04],
       [2.00000000e+02, 2.00000000e+02, 1.32910869e-04],
       [2.51000000e+02, 2.51000000e+02, 8.61094567e-05],
       [3.16000000e+02, 3.16000000e+02, 8.16840060e-05],
       [3.98000000e+02, 3.98000000e+02, 1.05277232e-04],
       [5.01000000e+02, 5.01000000e+02, 9.78196057e-05],
       [6.31000000e+02, 6.31000000e+02, 2.07607103e-05],
       [7.94000000e+02, 7.94000000e+02, 2.72429677e-04],
       [1.00000000e+03, 1.00000000e+03, 1.90169226e-04]])

errs9b=np.array([[1.00000000e+02, 1.00000000e+02, 9.45044045e-05],
       [1.26000000e+02, 1.26000000e+02, 3.59467703e-04],
       [1.58000000e+02, 1.58000000e+02, 9.32610089e-05],
       [2.00000000e+02, 2.00000000e+02, 3.13617980e-05],
       [2.51000000e+02, 2.51000000e+02, 1.69373919e-04],
       [3.16000000e+02, 3.16000000e+02, 4.79100194e-05],
       [3.98000000e+02, 3.98000000e+02, 2.39655387e-04],
       [5.01000000e+02, 5.01000000e+02, 5.45056829e-04],
       [6.31000000e+02, 6.31000000e+02, 1.79791710e-04],
       [7.94000000e+02, 7.94000000e+02, 3.96359436e-05],
       [1.00000000e+03, 1.00000000e+03, 6.39048549e-05]])

errs10b=np.array([[1.00000000e+02, 1.00000000e+02, 1.58609562e-04],
       [1.26000000e+02, 1.26000000e+02, 1.87547314e-04],
       [1.58000000e+02, 1.58000000e+02, 1.70455858e-04],
       [2.00000000e+02, 2.00000000e+02, 1.39039758e-04],
       [2.51000000e+02, 2.51000000e+02, 5.59035788e-05],
       [3.16000000e+02, 3.16000000e+02, 3.88184540e-04],
       [3.98000000e+02, 3.98000000e+02, 4.54021410e-05],
       [5.01000000e+02, 5.01000000e+02, 7.54026425e-05],
       [6.31000000e+02, 6.31000000e+02, 1.40223412e-04],
       [7.94000000e+02, 7.94000000e+02, 1.70350778e-04],
       [1.00000000e+03, 1.00000000e+03, 2.00617200e-04]])

errs11b=np.array([[1.00000000e+02, 1.00000000e+02, 2.52983103e-05],
       [1.26000000e+02, 1.26000000e+02, 4.01648666e-04],
       [1.58000000e+02, 1.58000000e+02, 1.67803614e-04],
       [2.00000000e+02, 2.00000000e+02, 1.79792061e-04],
       [2.51000000e+02, 2.51000000e+02, 7.32639216e-05],
       [3.16000000e+02, 3.16000000e+02, 1.36090111e-04],
       [3.98000000e+02, 3.98000000e+02, 1.28211577e-04],
       [5.01000000e+02, 5.01000000e+02, 4.64158784e-04],
       [6.31000000e+02, 6.31000000e+02, 2.63715166e-04],
       [7.94000000e+02, 7.94000000e+02, 9.70354511e-06],
       [1.00000000e+03, 1.00000000e+03, 9.11799936e-05]])

errs11b=np.array([[1.00000000e+02, 1.00000000e+02, 2.85775280e-04],
       [1.26000000e+02, 1.26000000e+02, 7.50813147e-05],
       [1.58000000e+02, 1.58000000e+02, 5.41057306e-05],
       [2.00000000e+02, 2.00000000e+02, 4.02881936e-04],
       [2.51000000e+02, 2.51000000e+02, 3.69311189e-05],
       [3.16000000e+02, 3.16000000e+02, 3.34934448e-04],
       [3.98000000e+02, 3.98000000e+02, 5.20971733e-04],
       [5.01000000e+02, 5.01000000e+02, 2.65928593e-05],
       [6.31000000e+02, 6.31000000e+02, 1.42873566e-04],
       [7.94000000e+02, 7.94000000e+02, 5.24895198e-05],
       [1.00000000e+03, 1.00000000e+03, 1.85123406e-04]])

errs12b=np.array([[1.00000000e+02, 1.00000000e+02, 2.12327065e-04],
       [1.26000000e+02, 1.26000000e+02, 1.13020194e-04],
       [1.58000000e+02, 1.58000000e+02, 4.94610388e-05],
       [2.00000000e+02, 2.00000000e+02, 1.60564334e-04],
       [2.51000000e+02, 2.51000000e+02, 4.39926737e-04],
       [3.16000000e+02, 3.16000000e+02, 9.86043280e-05],
       [3.98000000e+02, 3.98000000e+02, 1.99302948e-05],
       [5.01000000e+02, 5.01000000e+02, 5.92798666e-04],
       [6.31000000e+02, 6.31000000e+02, 3.69553955e-04],
       [7.94000000e+02, 7.94000000e+02, 2.39278175e-04],
       [1.00000000e+03, 1.00000000e+03, 1.46742669e-04]])

#########################################################################

#Finding the mean of the error at each number of paths
tempb=np.zeros([0])
for i in range(11): #summing the error at each no of paths
    tempb=np.append(tempb, np.add(errs1b[i,2], errs2b[i,2]))
    tempb[i]+=np.add(errs3b[i,2], errs4b[i,2])
    tempb[i]+=np.add(errs5b[i,2], errs6b[i,2])
    tempb[i]+=np.add(errs7b[i,2], errs8b[i,2])
    tempb[i]+=np.add(errs9b[i,2], errs10b[i,2])
    tempb[i]+=np.add(errs11b[i,2], errs12b[i,2])
  #  tempb[i]+=np.add(errs13b[i,2], errs14b[i,2])


i=0
for i in range(11): #finding mean
    tempb[i]/=11
    
#########################################################################

###Error Plot###
plt.ylabel('Error')
plt.xlabel('Number of Paths')
plt.grid(1)
#plt.loglog(errs1b[:,0],errs1b[:,2],'bo-')
plt.loglog(errs1b[:,0],0.05e-1*errs1b[:,0]**-0.5,'--')
plt.loglog(errs1b[:,0],errs1b[:,2],'-', alpha=0.9, 
           c=next(cycol), linewidth=0.5) #Plottings errors
plt.loglog(errs2b[:,0],errs2b[:,2],'-', alpha=0.9, 
           c=next(cycol), linewidth=0.5) 
plt.loglog(errs3b[:,0],errs3b[:,2],'-',alpha=0.9, 
           c=next(cycol), linewidth=0.5) 
plt.loglog(errs4b[:,0],errs4b[:,2],'-', alpha=0.9,
           c=next(cycol), linewidth=0.5) 
plt.loglog(errs5b[:,0],errs5b[:,2],'-', alpha=0.9, 
           c=next(cycol), linewidth=0.5) 
plt.loglog(errs6b[:,0],errs6b[:,2],'-', alpha=0.9, 
           c=next(cycol), linewidth=0.5) 
plt.loglog(errs7b[:,0],errs7b[:,2],'-', alpha=0.9, 
           c=next(cycol), linewidth=0.5) 
plt.loglog(errs8b[:,0],errs8b[:,2],'-', alpha=0.9, 
           c=next(cycol), linewidth=0.5) 
plt.loglog(errs9b[:,0],errs9b[:,2],'-', alpha=0.9, 
           c=next(cycol), linewidth=0.5) 
plt.loglog(errs10b[:,0],errs10b[:,2],'-', alpha=0.9, 
           c=next(cycol), linewidth=0.5) 
plt.loglog(errs11b[:,0],errs11b[:,2],'-', alpha=0.9,
           c=next(cycol), linewidth=0.5) 
plt.loglog(errs11b[:,0],errs12b[:,2],'-', alpha=0.9, 
           c=next(cycol), linewidth=0.5) 
#plt.loglog(errs11b[:,0],errs13b[:,2],'-', alpha=0.9, c=next(cycol), linewidth=0.5) 
#plt.loglog(errs11b[:,0],errs14b[:,2],'-', alpha=0.9, c=next(cycol), linewidth=0.5) 
plt.loglog(errs1b[:,0],tempb[:],'bo-', alpha=1, c='blue'
           , linewidth=2.5) 
plt.savefig('Error-An.pgf')                
plt.show()


#########################################################################

###Plot of Error for Both Antithetic and Non-Antithetic###
nonantierrs=np.array([0.00281734, 0.00249226, 0.00166836, 
                      0.00154283, 0.00198015,
       0.00098627, 0.00117303, 0.00079748, 0.00104032, 0.00123622,
       0.00064322]) ####taken from temp array from 'Error-NA'


plt.ylabel('Error')
plt.xlabel('Number of Paths')
plt.grid(1)
#plt.loglog(errs1b[:,0],errs1b[:,2],'bo-')
#plt.loglog(errs1b[:,0],1e-1*errs1b[:,0]**-1,'--')
plt.loglog(errs1b[:,0],0.25e-1*errs1b[:,0]**-0.5,'--')
plt.loglog(errs1b[:,0],0.04e-1*errs1b[:,0]**-0.5,'--')
plt.loglog(errs1b[:,0],tempb[:],'bo-', alpha=1, c='blue'
           , linewidth=2.5, label='Antithetic') 
plt.loglog(errs1b[:,0],nonantierrs[:],'bo-', alpha=1, c='red'
           , linewidth=2.5, label='Non-Antithetic') 
plt.legend(loc="upper right")
plt.savefig('Error-Comparison.pgf')                
plt.show()




